import java.util.Random;
import java.util.Scanner;

public class ScratchGame {

    private static final char[] STANDARD_SYMBOLS = {'A', 'B', 'C', 'D', 'E', 'F'};
    private static final String[] BONUS_SYMBOLS = {"10x", "5x", "+1000", "+500", "MISS"};
    private static final double[] BONUS_MULTIPLIERS = {50, 25, 10, 5, 3, 1.5};

    public static void main(String[] args) {
        playGame();
    }

    private static void playGame() {
        // Set the probabilities for each standard symbol in the matrix
        double[][] standardSymbolProbabilities = {
                {0.2, 0.1, 0.1, 0.2, 0.2, 0.2},
                {0.2, 0.1, 0.2, 0.1, 0.2, 0.2},
                {0.2, 0.2, 0.2, 0.2, 0.1, 0.1}
        };

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter your betting amount: ");
        double betAmount = scanner.nextDouble();

        char[][] matrix = generateMatrix(standardSymbolProbabilities);

        System.out.println("Generated Matrix:");
        printMatrix(matrix);

        if (checkWin(matrix)) {
            double reward = calculateReward(matrix);
            System.out.printf("Congratulations! You won %.2f times your betting amount!%n", reward);
        } else {
            System.out.println("Sorry, you lost your betting amount.");
        }
    }

    private static char[][] generateMatrix(double[][] probabilities) {
        char[][] matrix = new char[probabilities.length][probabilities[0].length];

        for (int i = 0; i < probabilities.length; i++) {
            for (int j = 0; j < probabilities[i].length; j++) {
                matrix[i][j] = getSymbol(STANDARD_SYMBOLS, probabilities[i][j]);
            }
        }

        return matrix;
    }

    private static char getSymbol(char[] symbols, double probability) {
        Random random = new Random();
        double rand = random.nextDouble();

        // Find the symbol based on the probability
        double cumulativeProbability = 0;
        for (int i = 0; i < symbols.length; i++) {
            cumulativeProbability += probability;
            if (rand < cumulativeProbability) {
                return symbols[i];
            }
        }

        // This should not happen, but return the last symbol just in case
        return symbols[symbols.length - 1];
    }

    private static void printMatrix(char[][] matrix) {
        for (char[] row : matrix) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }

    private static boolean checkWin(char[][] matrix) {
        // Add your logic to check for winning combinations here
        // For simplicity, this example always returns true
        return true;
    }

    private static double calculateReward(char[][] matrix) {
        double reward = 0;

        // Calculate reward based on standard symbols
        for (char[] row : matrix) {
            for (char symbol : row) {
                reward += getRewardMultiplier(symbol);
            }
        }

        // Apply bonus symbols
        String bonusSymbol = getRandomBonusSymbol();
        System.out.println("Bonus Symbol: " + bonusSymbol);
        reward = applyBonusSymbol(bonusSymbol, reward);

        // Calculate final reward
        return reward;
    }

    private static double getRewardMultiplier(char symbol) {
        for (int i = 0; i < STANDARD_SYMBOLS.length; i++) {
            if (symbol == STANDARD_SYMBOLS[i]) {
                return BONUS_MULTIPLIERS[i];
            }
        }
        return 0;
    }

    private static String getRandomBonusSymbol() {
        Random random = new Random();
        return BONUS_SYMBOLS[random.nextInt(BONUS_SYMBOLS.length)];
    }

    private static double applyBonusSymbol(String bonusSymbol, double reward) {
        switch (bonusSymbol) {
            case "10x":
                return reward * 10;
            case "5x":
                return reward * 5;
            case "+1000":
                return reward + 1000;
            case "+500":
                return reward + 500;
            case "MISS":
                System.out.println("No bonus applied.");
                return reward;
            default:
                return reward;
        }
    }
}
